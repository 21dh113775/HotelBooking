// <auto-generated />
using System;
using HotelBooking.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelBooking.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250731044914_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelBooking.Domain.Entities.Furniture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Furnitures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Smart TV 43 inch",
                            ImageUrl = "/images/furniture/tv.jpg",
                            Name = "Tivi Samsung",
                            Price = 25000m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bàn gỗ cao cấp",
                            ImageUrl = "/images/furniture/desk.jpg",
                            Name = "Bàn làm việc",
                            Price = 15000m
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Phòng 30m2, có máy lạnh",
                            ImageUrl = "/images/rooms/deluxe.jpg",
                            Name = "Phòng Deluxe",
                            PricePerHour = 100000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Có bồn tắm và ghế massage",
                            ImageUrl = "/images/rooms/vip.jpg",
                            Name = "Phòng VIP",
                            PricePerHour = 200000m,
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.RoomFurniture", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("FurnitureId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "FurnitureId");

                    b.HasIndex("FurnitureId");

                    b.ToTable("RoomFurnitures");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            FurnitureId = 1
                        },
                        new
                        {
                            RoomId = 1,
                            FurnitureId = 2
                        },
                        new
                        {
                            RoomId = 2,
                            FurnitureId = 1
                        });
                });

            modelBuilder.Entity("HotelBooking.Modules.Entity_Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMember")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 31, 4, 49, 12, 710, DateTimeKind.Utc).AddTicks(6313),
                            Email = "admin@hotel.com",
                            FullName = "Admin",
                            IsMember = false,
                            PasswordHash = "$2a$11$bDaYy5XAqkkk/dtYOAX2GOhZC108eqFhLFzq1U9d3sGfwvqBbOrIK",
                            PhoneNumber = "0123456789",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.RoomFurniture", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.Furniture", "Furniture")
                        .WithMany("RoomFurnitures")
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking.Domain.Entities.Room", "Room")
                        .WithMany("RoomFurnitures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Furniture");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBooking.Modules.Entity_Models.User", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Furniture", b =>
                {
                    b.Navigation("RoomFurnitures");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Room", b =>
                {
                    b.Navigation("RoomFurnitures");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
